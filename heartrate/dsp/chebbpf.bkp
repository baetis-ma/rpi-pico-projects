#include <math.h>

double red_bpf(double input) {
  int i, n = 4;
  int m = n / 4;
  float time;
  double ep = 1;
  double s = 100;
  double f1 = 7.0;
  double f2 = 0.7;
  double a = cos(M_PI*(f1+f2)/s)/cos(M_PI*(f1-f2)/s);
  double a2 = a*a;
  double b = tan(M_PI*(f1-f2)/s);
  double b2 = b*b;
  double u = log((1.0+sqrt(1.0+ep*ep))/ep);
  double su = sinh(2.0*u/(double)n);
  double cu = cosh(2.0*u/(double)n);
  double r, c;

  double A[1];
  double d1[1];
  double d2[1];
  double d3[1];
  double d4[1];
  double w0[1];
  double w1[1];
  double w2[1];
  double w3[1];
  double w4[1];

  for(i=0; i<m; ++i){
    r = sin(M_PI*(2.0*i+1.0)/n)*su;
    c = cos(M_PI*(2.0*i+1.0)/n)*cu;
    c = r*r + c*c;
    s = b2*c + 2.0*b*r + 1.0;
    A[i] = b2/(4.0*s); // 4.0
    d1[i] = 4.0*a*(1.0+b*r)/s;
    d2[i] = 2.0*(b2*c-2.0*a2-1.0)/s;
    d3[i] = 4.0*a*(1.0-b*r)/s;
    d4[i] = -(b2*c - 2.0*b*r + 1.0)/s;
  }

  ep = 2.0/ep; // used to normalize
  //while(scanf("%f %lf", &time, &x)!=EOF){
    for(i=0; i<m; ++i){
      w0[i] = d1[i]*w1[i] + d2[i]*w2[i]+ d3[i]*w3[i]+ d4[i]*w4[i] + input;
      input = A[i]*(w0[i] - 2.0*w2[i] + w4[i]);
      w4[i] = w3[i];
      w3[i] = w2[i];
      w2[i] = w1[i];
      w1[i] = w0[i];
    }
      //printf("%10.3f  %lf\n", time, ep*x);
    //}

  return(input);
}
